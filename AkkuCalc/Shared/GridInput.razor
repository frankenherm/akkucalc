@using AkkuCalc.Model
@using AkkuCalc.Services

@inject NumberPartitioningService NumberPartitioningService
@inject IJSRuntime JSRuntime


<div class="card">
    <div class="card-body">
        
        <EditForm class="vstack" Model="Capacity" OnValidSubmit="SubmitAsync">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <label class="form-label" for="input">weitere Zelle hinzufügen: </label>
        <InputNumber id="input-element-primary" class="form-control" 
            @bind-Value="Capacity.Value" 
            @ref="inputElement"></InputNumber>
        </EditForm>
        <div class="row my-3">
            <div class="col-6">
                <label class="form-label" for="subset-numbers" style="line-height: 2.2rem">Anzahl der Sets</label>
            </div>
            <div class="col-6">
                <input type="number" id="subset-numbers" class="form-control" @bind-value="NumberPartitioningService.NumberOfSubsets" />
            </div>
        </div>
    </div>
    <div class="card-footer">
        <button class="btn btn-primary float-end" @onclick="Calculate">Calculate</button>
    </div>
</div>


@code {
    private InputNumber<float> inputElement;

    private CellCapacity Capacity { get; set; } = new CellCapacity();
    private Task SubmitAsync()
    {
        this.NumberPartitioningService.Add(Capacity.Value);
        Capacity = new AkkuCalc.Model.CellCapacity();
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (inputElement.Element.HasValue)
        {
            await inputElement.Element.Value.FocusAsync(true);
            await Select();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Select()
    {
        await JSRuntime.InvokeVoidAsync("selectText", "input-element-primary");
    }


    private async Task ScrollToResults()
    {
        await JSRuntime.InvokeVoidAsync("scrollToId", "result-table");
    }
    private async void Calculate()
    {
        this.NumberPartitioningService.DoPartition();
        await this.ScrollToResults();
    }
}
